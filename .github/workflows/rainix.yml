name: Rainix CI
on: [push]

jobs:
  standard-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [rainix-rs-test, rainix-rs-artifacts, rainix-rs-static]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G

      - name: Rainix Rust Prelude
        run: nix develop -c rainix-rs-prelude

      - name: Run Command ${{ matrix.task }}
        run: nix develop -c ${{ matrix.task }}

      - name: Build for wasm target
        run: nix develop -c cargo build --target wasm32-unknown-unknown
