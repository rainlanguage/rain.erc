name: Release
on:
  workflow_dispatch:
    inputs:
      version-level:
        description: "Select Version Level"
        required: true
        type: choice
        options:
          - alpha # Increase the alpha pre-version (x.y.z-alpha.M)
          - beta # Increase the beta pre-version (x.y.z-beta.M)
          - patch # Increase the patch version (x.y.z)
          - minor # Increase the minor version (x.y.0)
          - major # Increase the major version (x.0.0)
          - release # Remove the pre-version, ie remove alpha/beta/rc (x.y.z)
          - rc # Increase the rc pre-version (x.y.z-rc.M)

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1G

      - run: |
          git config --global user.email "${{ secrets.CI_GIT_EMAIL }}"
          git config --global user.name "${{ secrets.CI_GIT_USER }}"

      - run: nix develop -c rainix-rs-prelude
      - run: nix develop -c rainix-rs-test

      - run: nix develop -c cargo release --no-confirm --execute ${{ inputs.version-level }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
